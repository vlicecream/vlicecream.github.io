<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>构建器 - 标签 - Ame</title>
        <link>https://example.com/tags/%E6%9E%84%E5%BB%BA%E5%99%A8/</link>
        <description>构建器 - 标签 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/%E6%9E%84%E5%BB%BA%E5%99%A8/" rel="self" type="application/rss+xml" /><item>
    <title>构建器</title>
    <link>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%9E%84%E5%BB%BA%E5%99%A8/</link>
    <pubDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%9E%84%E5%BB%BA%E5%99%A8/</guid>
    <description><![CDATA[<h1 id="构建器">构建器</h1>
<h2 id="对象创建模式">对象创建模式</h2>
<ol>
<li><em><strong>什么是对象创建</strong></em>
<ul>
<li><em>通过对象创建模式，绕开new，来避免对象创建(new)过程中所导致的紧耦合(依赖具体类)从而支持对象创建</em></li>
<li><em><strong>他是接口抽象之后的第一步工作</strong></em></li>
</ul>
</li>
<li><em><strong>典型模式</strong></em>
<ul>
<li><em>Factory Method</em></li>
<li><em>Abstract Factory</em></li>
<li><em>Prototype</em></li>
<li><em>Builder</em></li>
</ul>
</li>
</ol>
<h2 id="构建器动机">构建器动机</h2>
<ol>
<li><em>在软件系统中，有时候面临着“一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</em></li>
<li><em>如何应对这种变化？如何提供一种“封装机制”来隔离出“复杂对象的各个部分”的变化，从而保持系统中的“稳定构建算法”不随着需求改变而改变？</em></li>
</ol>
<h2 id="模式定义">模式定义</h2>
<ol>
<li><em>将一个复杂对象的构建与其表示相分离，使得同样的构建过程(稳定)可以创建不同的表示(变化)</em></li>
</ol>
<h2 id="要点总结">要点总结</h2>
<ol>
<li><em>Builder模式主要用于“分步骤构建一个复杂的对象”。在这其中“分步骤”是一个稳定的算法，而复杂对象的各个部分则经常变化。</em></li>
<li><em>变化点在哪里，封装哪里—— Builder模式主要在于应对“复杂对象各个部分”的频繁需求变动。其缺点在于难以应对“分步骤构建算法”的需求变动</em></li>
<li><em>在Builder模式中，要注意不同语言中构造器内调用虚函数的差别（C++ vs. C#)</em></li>
</ol>]]></description>
</item>
</channel>
</rss>
