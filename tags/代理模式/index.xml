<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>代理模式 - 标签 - Ame</title>
        <link>https://example.com/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
        <description>代理模式 - 标签 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>代理模式</title>
    <link>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[<h1 id="代理模式">代理模式</h1>
<h2 id="接口隔离模式">接口隔离模式</h2>
<ol>
<li><em><strong>什么是接口隔离</strong></em>
<ul>
<li><em>在组件构建过程中, 某些接口之间直接的依赖 常常会带来很多问题 甚至根本无法实现</em></li>
<li><em>采用添加一层间接(稳定)接口, 来隔离本来互相紧密关联的接口是一种常见的解决方案</em></li>
</ul>
</li>
<li><em><strong>典型模式</strong></em>
<ul>
<li><em>Façade</em></li>
<li><em>Proxy</em></li>
<li><em>Mediator</em></li>
<li><em>Adapter</em></li>
</ul>
</li>
</ol>
<h2 id="动机">动机</h2>
<ol>
<li><em>在面向对象系统中, 有些对象由于某种原因(比如对象创建的开销很大, 或者某些操作需要安全控制, 或者需要进程外的访问等)直接访问会给使用者或者系统结构带来很多麻烦</em></li>
<li><em>如何在不是去透明操作对象的同时来管理或者控制这些对象特有的复杂性？</em></li>
<li><em>增加一层间接层是软件开发中常见的解决方式</em></li>
</ol>
<h2 id="初始代码">初始代码</h2>
<ol>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pr]]></description>
</item>
</channel>
</rss>
