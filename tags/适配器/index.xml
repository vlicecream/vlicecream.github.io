<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>适配器 - 标签 - Ame</title>
        <link>https://example.com/tags/%E9%80%82%E9%85%8D%E5%99%A8/</link>
        <description>适配器 - 标签 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/%E9%80%82%E9%85%8D%E5%99%A8/" rel="self" type="application/rss+xml" /><item>
    <title>适配器</title>
    <link>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8/</link>
    <pubDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8/</guid>
    <description><![CDATA[<h1 id="适配器">适配器</h1>
<h2 id="接口隔离模式">接口隔离模式</h2>
<ol>
<li><em><strong>什么是接口隔离</strong></em>
<ul>
<li><em>在组件构建过程中, 某些接口之间直接的依赖 常常会带来很多问题 甚至根本无法实现</em></li>
<li><em>采用添加一层间接(稳定)接口, 来隔离本来互相紧密关联的接口是一种常见的解决方案</em></li>
</ul>
</li>
<li><em><strong>典型模式</strong></em>
<ul>
<li><em>Façade</em></li>
<li><em>Proxy</em></li>
<li><em>Mediator</em></li>
<li><em>Adapter</em></li>
</ul>
</li>
</ol>
<h2 id="动机">动机</h2>
<ol>
<li><em>在软件系统中, 由于应用环境的变化, 常常需要将&quot;一些现存的对象&quot;放在新的环境中应用, 但是新环境要求的接口是这些现存对象所不满足的</em></li>
<li><em>如何应对这种&quot;迁移的变化&quot;? 如何既能利用现有对象的良好实现, 同时又能满足新的应用环境所要求的接口?</em></li>
</ol>
<h2 id="模式定义">模式定义</h2>
<ol>
<li><em>将一个类的接口转换成客户希望的另一个接口</em></li>
<li><em>Adapter模式使得由于接口不兼容而不能一起工作的那些类可以一起工作</em></li>
</ol>
<h2 id="要点总结">要点总结</h2>
<ol>
<li><em>Adapter模式主要应用于&quot;希望复用一些现存的类, 但是接口又与复用环境要求不一致的情况&quot;, 在遗留代码复用、类库迁移等方面非常有用</em></li>
<li><em>GoF 23 定义了两种Adapter模式的实现结构, 对象适配器和类适配器</em>
<ul>
<li><em>不推荐使用类适配器 因为类适配器用的是多继承的方法</em></li>
<li><em>推荐使用对象适配器 因为对象适配器使用的组合方法</em></li>
</ul>
</li>
<li><em>Adapter模式的使用非常灵活, 不必拘泥于上述两种模式</em>
<ul>
<li><em>例如 完全可以将Adapter模式中的现存对象作为新的接口方法参数, 来达到适配的目的</em></li>
</ul>
</li>
</ol>]]></description>
</item>
</channel>
</rss>
