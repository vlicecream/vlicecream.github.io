<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>抽象工厂 - 标签 - Ame</title>
        <link>https://example.com/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</link>
        <description>抽象工厂 - 标签 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/" rel="self" type="application/rss+xml" /><item>
    <title>抽象工厂</title>
    <link>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</link>
    <pubDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</guid>
    <description><![CDATA[<h1 id="抽象工厂">抽象工厂</h1>
<h2 id="对象创建模式">对象创建模式</h2>
<ol>
<li><em><strong>什么是对象创建</strong></em>
<ul>
<li><em>通过对象创建模式，绕开new，来避免对象创建(new)过程中所导致的紧耦合(依赖具体类)从而支持对象创建</em></li>
<li><em><strong>他是接口抽象之后的第一步工作</strong></em></li>
</ul>
</li>
<li><em><strong>典型模式</strong></em>
<ul>
<li><em>Factory Method</em></li>
<li><em>Abstract Factory</em></li>
<li><em>Prototype</em></li>
<li><em>Builder</em></li>
</ul>
</li>
</ol>
<h2 id="抽象工厂动机">抽象工厂动机</h2>
<ol>
<li><em>在软件系统中 经常面临着 &ldquo;一系列相互依赖的对象&quot;的创建工作，同时, 由于需求的变化, 往往存在更多系列对象的创建工作</em></li>
<li><em>如果应对这种变化? 如何绕过常规的对象创建方法(new), 提供一种&quot;封装机制&quot;来避免客户程序和这种&quot;多系列具体对象创建工作&quot;的紧耦合?</em></li>
</ol>
<h2 id="初始代码">初始代码</h2>
<ol>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pr]]></description>
</item>
</channel>
</rss>
