<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>设计模式 - 标签 - Ame</title>
        <link>https://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
        <description>设计模式 - 标签 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>简介</title>
    <link>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A6%82%E5%BF%B5/</link>
    <pubDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A6%82%E5%BF%B5/</guid>
    <description><![CDATA[<h1 id="面向对象设计原则">面向对象设计原则</h1>
<h1 id="设计模式">设计模式</h1>
<h2 id="设计模式-1">设计模式</h2>
<ol>
<li><em><strong>什么是设计模式</strong></em>
<ul>
<li><em>每一个模式描述了一个在我们周围不断重复发生的问题以及该问题的解决方案的核心，这样你就能一次又一次的使用该方案而不必重复劳动</em></li>
<li><em>设计模式有可以说是 可复用面向对象软件的基础</em></li>
<li><em><strong>重点在于 可复用 面向对象</strong></em></li>
</ul>
</li>
</ol>
<h2 id="如何解决复杂性">如何解决复杂性</h2>
<ol>
<li><em><strong>分解</strong></em>
<ul>
<li><em>分而治之，将大问题分成多个小问题，将复杂问题分成多个简单问题</em></li>
<li><em>这个在算法是一个最重要的核心思路，但是在设计模式，只能说可以用，但是不够用!!!</em></li>
</ul>
</li>
<li><em><strong>抽象</strong></em>
<ul>
<li><em>由于不能掌握全部的复杂对象，我们选择忽视他的非本质问题，而去处理泛化和理想化的对象模型</em></li>
<li><em>这个就是设计模式的核心思路</em></li>
</ul>
</li>
</ol>
<h1 id="面向对象">面向对象</h1>
<h2 id="面向对象设计">面向对象设计</h2>
<ol>
<li><em><strong>变化是复用的天敌，而面向对象设计就是抵御变化！！！</strong></em></li>
</ol>
<h2 id="重新认识面向对象">重新认识面向对象</h2>
<ol>
<li><em><strong>理解隔离变化</strong></em>
<ul>
<li><em>从宏观层面来看，面向对象的构建方式更能适应软件变化，能将变化所带来的影响度减为最小</em></li>
<li><em>从微观层面来看，面向对象的方式更强调每个类的责任，由于需求变化导致的新增类型不应该影响原来类型的实现</em></li>
</ul>
</li>
<li><em><strong>对象是什么</strong></em>
<ul>
<li><em>从语言实现层面来看，对象封装了代码和数据</em></li>
<li><em>从规格层面讲，对象是一系列可被使用的公共接口</em></li>
<li><em>从概念层面讲，对象是某种拥有责任的抽象</em></li>
</ul>
</li>
</ol>
<h2 id="面向对象设计原则-1">面向对象设计原则</h2>
<ol>
<li><em><strong>依赖倒置原则</strong></em>
<ul>
<li><em>高层模块（稳定）不应该依赖于底层模块（变化），二者应该依赖于抽象（稳定）</em></li>
<li><em>抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象</em></li>
</ul>
</li>
<li><em><strong>开放封闭原则</strong></em>
<ul>
<li><em>对扩展开放，对更改封闭，类模块应该是可扩展的，并且不能修改</em></li>
</ul>
</li>
<li><em><strong>单一职责原则</strong></em>
<ul>
<li><em>每个类引起他变化的原因只准一个，不能是多个</em></li>
</ul>
</li>
<li><em><strong>要多用组合，而不是多用继承</strong></em>
<ul>
<li><em>继承会造成子类的数目和功能急剧膨胀，所以要多用组合</em></li>
</ul>
</li>
<li><em><strong>封装变化</strong></em>
<ul>
<li><em>将变化点封装起来，不要去影响稳定点</em></li>
</ul>
</li>
<li><em><strong>替换原则</strong></em>
<ul>
<li><em>子类应该去重写父类方法，而不是去隐藏父类方法</em></li>
</ul>
</li>
<li><em><strong>接口隔离原则</strong></em>
<ul>
<li><em>接口应该小而完备，不应该强迫客户程序依赖他们不用的方法</em></li>
</ul>
</li>
<li><em><strong>针对接口编程，而不是针对实现编程</strong></em>
<ul>
<li><em>不将变量类型声明为某个特定的具体类，而是抽象出来声明为某个接口</em></li>
<li><em>客户程序无需获知对象的具体类型，只需要知道对象所具有的接口</em></li>
<li><em>减少系统中各部分的依赖关系，从而实现 &ldquo;高内聚， 松耦合&rdquo; 的类型设计</em></li>
</ul>
</li>
</ol>
<h2 id="heading"></h2>]]></description>
</item>
</channel>
</rss>
