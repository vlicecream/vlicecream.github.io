<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>门面模式 - 标签 - Ame</title>
        <link>https://example.com/tags/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</link>
        <description>门面模式 - 标签 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>门面模式</title>
    <link>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[<h1 id="门面模式">门面模式</h1>
<h2 id="接口隔离模式">接口隔离模式</h2>
<ol>
<li><em><strong>什么是接口隔离</strong></em>
<ul>
<li><em>在组件构建过程中, 某些接口之间直接的依赖 常常会带来很多问题 甚至根本无法实现</em></li>
<li><em>采用添加一层间接(稳定)接口, 来隔离本来互相紧密关联的接口是一种常见的解决方案</em></li>
</ul>
</li>
<li><em><strong>典型模式</strong></em>
<ul>
<li><em>Façade</em></li>
<li><em>Proxy</em></li>
<li><em>Mediator</em></li>
<li><em>Adapter</em></li>
</ul>
</li>
</ol>
<h2 id="动机">动机</h2>
<ol>
<li><em>上述A方案的问题在于组件的客户和组件中各种复杂的子系统有了过多的耦合, 随着外部客户程序和各子系统的演化, 这种过多的耦合面临很多变化的挑战</em></li>
<li><em>如何简化外部客户程序和系统间的交互接口? 如何将外部客户程序的演化和内部子系统的变化之间的依赖相互解藕?</em></li>
</ol>
<h2 id="模式定义">模式定义</h2>
<ol>
<li><em>为子系统中的一组接口提供一个一致(稳定)的界面, Facade模式定义了一个高层接口, 这个接口使得这一子系统更加容易复用</em></li>
</ol>
<h2 id="类图">类图</h2>
<ol>
<li><em>这个模式下的类图其实没有很明确的概念</em></li>
</ol>
<h2 id="要点总结">要点总结</h2>
<ol>
<li><em>从客户程序的角度来看, 门面模式简化了整个组件系统的接口, 对于组件内部与外部客户程序来说, 达到了一种&quot;解藕&quot;的效果&mdash;-内部子系统的任何变化不会影响到Facade接口的变化</em></li>
<li><em>Facade设计模式更注重从架构的层次去看整个系统, 而不是单个类的层次</em></li>
<li><em>门面模式很多时间更是一种架构设计模式</em></li>
<li><em>Facade设计模式并非一个集装箱, 可以任意的放进任何多个对象.</em></li>
<li><em>Facade模式中组件的内部应该是&quot;相互耦合关系比较大的一系列组件&quot;, 而不是一个简单的功能集合</em></li>
</ol>]]></description>
</item>
</channel>
</rss>
