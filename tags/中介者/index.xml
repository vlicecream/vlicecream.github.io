<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>中介者 - 标签 - Ame</title>
        <link>https://example.com/tags/%E4%B8%AD%E4%BB%8B%E8%80%85/</link>
        <description>中介者 - 标签 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/%E4%B8%AD%E4%BB%8B%E8%80%85/" rel="self" type="application/rss+xml" /><item>
    <title>中介者</title>
    <link>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85/</link>
    <pubDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85/</guid>
    <description><![CDATA[<h1 id="中介者">中介者</h1>
<h2 id="接口隔离模式">接口隔离模式</h2>
<ol>
<li><em><strong>什么是接口隔离</strong></em>
<ul>
<li><em>在组件构建过程中, 某些接口之间直接的依赖 常常会带来很多问题 甚至根本无法实现</em></li>
<li><em>采用添加一层间接(稳定)接口, 来隔离本来互相紧密关联的接口是一种常见的解决方案</em></li>
</ul>
</li>
<li><em><strong>典型模式</strong></em>
<ul>
<li><em>Façade</em></li>
<li><em>Proxy</em></li>
<li><em>Mediator</em></li>
<li><em>Adapter</em></li>
</ul>
</li>
</ol>
<h2 id="动机">动机</h2>
<ol>
<li><em>在软件构建过程中, 经常会出现多个对象互相关联交互的情况, 对象之间常常会维持一种复杂的引用关系，如果遇到一些需求的更改, 这种直接的引用关系将面临不断的变化</em></li>
<li><em>在这种情况下, 我们可使用一个&quot;中介对象&quot;来管理对象之间的关联关系, 避免相互交互的对象之间的紧耦合引用关系, 从而抵御变化</em></li>
</ol>
<h2 id="模式定义">模式定义</h2>
<ol>
<li><em>用一个中介对象来封装(变化)一系列的对象交互</em></li>
<li><em>中介者使各对象不需要显式的相互引用(编译时依赖 -&gt; 运行时依赖), 从而使得耦合松散, 而且可以独立的改变他们之间的交互</em></li>
</ol>
<h2 id="要点总结">要点总结</h2>
<ol>
<li><em>将多个对象间复杂的关联关系, Mediator模式将多个对象间的控制逻辑进行集中管理</em></li>
<li><em>变&quot;多个对象互相关联&quot;为&quot;多个对象和一个中介者关联&quot;, 简化了系统的维护, 抵御了可能的变化</em></li>
<li><em>随着控制逻辑的复杂变化, Mediator具体对象的实现可能相当复杂，这个时候可对Mediator对象进行分解处理</em></li>
<li><em>Facade模式是解耦系统间(单向)的对象关联关系</em></li>
<li><em>Mediator模式是解耦系统内各个对象间(双向)的关联关系</em></li>
</ol>]]></description>
</item>
</channel>
</rss>
