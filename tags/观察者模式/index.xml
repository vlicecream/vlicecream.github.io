<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>观察者模式 - 标签 - Ame</title>
        <link>https://example.com/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
        <description>观察者模式 - 标签 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>观察者模式</title>
    <link>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[<h1 id="观察者模式">观察者模式</h1>
<h2 id="组件协作模式"><em><strong>组件协作模式</strong></em></h2>
<ol>
<li><em><strong>什么是组件协作模式</strong></em>
<ul>
<li><em>现代软件专业分工之后的第一个结果就是 <strong>框架与应用程序的划分</strong></em></li>
<li><em><strong>组件协作</strong></em> <em>模式通过晚绑定，来实现框架和应用之间的松耦合，是二者之间协作时常用的模式</em></li>
</ul>
</li>
<li><em><strong>典型模式</strong></em>
<ul>
<li><em>Template Method</em></li>
<li><em>Observer / Event</em></li>
<li><em>Strategy</em></li>
</ul>
</li>
</ol>
<h2 id="模式定义"><em><strong>模式定义</strong></em></h2>
<ol>
<li><em>定义对象间的一种一对多(变化)的依赖关系 以便当一个对象的状态发生改变时，所有依赖于他的对象都得到通知并自动更新</em></li>
</ol>
<h2 id="要点总结">要点总结</h2>
<ol>
<li><em>使用面向对象的抽象思想，Observer模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达致松耦合</em></li>
<li><em>目标发送通知时，无需指定观察者，通知（可以携带通知信息作 为参数）会自动传播</em></li>
<li><em>观察者自己决定是否需要订阅通知，目标对象对此一无所知</em></li>
<li><em>Observer模式是基于事件的UI框架中非常常用的设计模式，也是MVC模式的一个重要组成部分。</em></li>
</ol>
<h2 id="具体代码先不展出--回头会补-想法是直接使用行为树的例子">具体代码先不展出  回头会补 想法是直接使用行为树的例子</h2>]]></description>
</item>
</channel>
</rss>
