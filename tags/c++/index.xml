<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>C&#43;&#43; - 标签 - Ame</title>
        <link>https://example.com/tags/c&#43;&#43;/</link>
        <description>C&#43;&#43; - 标签 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 17 Mar 2023 16:29:59 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/c&#43;&#43;/" rel="self" type="application/rss+xml" /><item>
    <title>inline</title>
    <link>https://example.com/c-inline/</link>
    <pubDate>Fri, 17 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/c-inline/</guid>
    <description><![CDATA[<h1 id="inline">inline</h1>
<h2 id="什么是内联函数-inline"><em><strong>什么是内联函数-inline</strong></em></h2>
<ol>
<li>
<p><em>引出</em></p>
<ul>
<li><em>函数是一个可以重复使用的代码块，CPU 会一条一条地挨着执行其中的代码。CPU 在执行主调函数代码时如果遇到了被调函数，主调函数就会暂停，CPU 转而执行被调函数的代码；被调函数执行完毕后再返回到主调函数，主调函数根据刚才的状态继续往下执行</em></li>
<li><em>一个 C/C++程序的执行过程可以认为是多个函数之间的相互调用过程，它们形成了一个或简单或复杂的调用链条，这个链条的起点是 main()，终点也是 main()。当 main() 调用完了所有的函数，它会返回一个值（例如<code>return 0;</code>）来结束自己的生命，从而结束整个程序</em></li>
<li><em>函数调用是有时间和空间开销的。程序在执行一个函数之前需要做一些准备工作，要将实参、局部变量、返回地址以及若干寄存器都压入栈中，然后才能执行函数体中的代码；函数体中的代码执行完毕后还要清理现场，将之前压入栈中的数据都出栈，才能接着执行函数调用位置以后的代码</em></li>
<li><em>如果函数体代码比较多，需要较长的执行时间，那么函数调用机制占用的时间可以忽略；如果函数只有一两条语句，那么大部分的时间都会花费在函数调用机制上，这种时间开销就就不容忽视</em></li>
<li><em>为了消除函数调用的时空开销，C++ 提供一种提高效率的方法，即在编译时将函数调用处用函数体替换，类似于C语言中的宏展开。这种在函数调用处直接嵌入函数体的函数称为内联函数（Inline Function），又称内嵌函数或者内置函数</em></li>
</ul>
</li>
<li>
<p><em>怎么定义内联函数</em></p>]]></description>
</item>
<item>
    <title>c&#43;&#43; 关键字与关键库函数</title>
    <link>https://example.com/c-%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E5%85%B3%E9%94%AE%E5%BA%93%E5%87%BD%E6%95%B0/</link>
    <pubDate>Thu, 16 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/c-%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E5%85%B3%E9%94%AE%E5%BA%93%E5%87%BD%E6%95%B0/</guid>
    <description><![CDATA[<h1 id="c-关键字与关键库函数">c++ 关键字与关键库函数</h1>
<h2 id="前言"><em><strong>前言</strong></em></h2>
<ol>
<li><em>想了想，最好的复习方法其实就是去写出来，good idea~</em></li>
</ol>
<h2 id="strlen-vs-sizeof"><em><strong>strlen V.S sizeof</strong></em></h2>
<ol>
<li>
<p><em><strong>什么是<code>strlen</code></strong></em></p>]]></description>
</item>
<item>
    <title>const</title>
    <link>https://example.com/c-const/</link>
    <pubDate>Thu, 16 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/c-const/</guid>
    <description><![CDATA[<h1 id="const">const</h1>
<table>
  <thead>
      <tr>
          <th style="text-align: center"></th>
          <th style="text-align: center">const object</th>
          <th style="text-align: center">non-const object</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center"><em><strong>const member functions</strong></em></td>
          <td style="text-align: center">✅</td>
          <td style="text-align: center">✅</td>
      </tr>
      <tr>
          <td style="text-align: center"><em><strong>non-const member functions</strong></em></td>
          <td style="text-align: center">❌</td>
          <td style="text-align: center">✅</td>
      </tr>
  </tbody>
</table>
<h2 id="object-与-member-func-的关系"><em><strong>object 与 member func 的关系</strong></em></h2>
<ol>
<li>
<p><em><strong>我们根据上述表格来看看例子</strong></em></p>]]></description>
</item>
<item>
    <title>friend</title>
    <link>https://example.com/c-friend/</link>
    <pubDate>Thu, 16 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/c-friend/</guid>
    <description><![CDATA[<h1 id="friend">friend</h1>
<h2 id="友元"><em><strong>友元</strong></em></h2>
<ol>
<li>
<p><em><strong>什么是友元</strong></em></p>
<ul>
<li>
<p><em>Friend 的意义在于打开封装的大门，可以直接从私有区域拿取数据</em></p>
</li>
<li>
<p><em>好比借钱，陌生人不可能借钱给他，但是朋友是可以的，但是朋友太多借太多钱也不太好，所以你自己选择，如果不设置friend，绕个弯从函数拿，也是可以的</em></p>]]></description>
</item>
<item>
    <title>lambda</title>
    <link>https://example.com/c-lambda/</link>
    <pubDate>Thu, 16 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/c-lambda/</guid>
    <description><![CDATA[<h1 id="lambda">lambda</h1>
<h2 id="lambda-1"><em><strong>lambda</strong></em></h2>
<ol>
<li>
<p><em>怎么去定义一个<code>lambda</code></em></p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="p">[]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;hello lambdas&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pr]]></description>
</item>
<item>
    <title>static</title>
    <link>https://example.com/c-static/</link>
    <pubDate>Thu, 16 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/c-static/</guid>
    <description><![CDATA[<h1 id="static">static</h1>
<h2 id="static-1"><em><strong>static</strong></em></h2>
<ol>
<li>
<p><em>什么是static</em></p>
<ul>
<li>
<p><em>下述代码括号里面传的就是<code>this pointer</code></em></p>
<p><em>当不是静态方法的时候 c1, c2, c3调用同一个函数 那么就是靠this point区分到底是c1 还是 c2 的</em></p>]]></description>
</item>
<item>
    <title>stl-体系结构</title>
    <link>https://example.com/c-stl-%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link>
    <pubDate>Thu, 16 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/c-stl-%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</guid>
    <description><![CDATA[<h1 id="体系结构">体系结构</h1>
<h1 id="标准库与stl">标准库与STL</h1>
<ol>
<li><strong>标准库与STL的差别</strong>
<ul>
<li><em>标准库 &gt; STL / 标准库里面百分之70 80 都是STL</em></li>
</ul>
</li>
<li><strong>STL六大部件</strong>
<ul>
<li><em>容器 / 分配器 / 算法 / 迭代器 / 仿函数 / 适配器</em></li>
</ul>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pr]]></description>
</item>
<item>
    <title>value &amp; poionter &amp; reference</title>
    <link>https://example.com/c-value-pointer-reference/</link>
    <pubDate>Thu, 16 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/c-value-pointer-reference/</guid>
    <description><![CDATA[<h1 id="value--poionter--reference">value &amp; poionter &amp; reference</h1>
<h2 id="引用"><em><strong>引用</strong></em></h2>
<ol>
<li>
<p><em><strong>什么是引用</strong></em></p>
<ul>
<li><em>reference 其实就是一个漂亮的 pointer</em></li>
</ul>
</li>
<li>
<p><em><strong>引用的代码</strong></em></p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pr]]></description>
</item>
<item>
    <title>编写头文件的思路流程(reference)</title>
    <link>https://example.com/c-%E7%BC%96%E5%86%99%E5%A4%B4%E6%96%87%E4%BB%B6%E7%9A%84%E6%80%9D%E8%B7%AF%E6%B5%81%E7%A8%8Breference/</link>
    <pubDate>Thu, 16 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/c-%E7%BC%96%E5%86%99%E5%A4%B4%E6%96%87%E4%BB%B6%E7%9A%84%E6%80%9D%E8%B7%AF%E6%B5%81%E7%A8%8Breference/</guid>
    <description><![CDATA[<h1 id="编写头文件的思路流程reference">编写头文件的思路流程(reference)</h1>
<h2 id="class内"><em><strong>class内</strong></em></h2>
<ol>
<li>
<p><em><strong>编写防卫式声明</strong></em></p>]]></description>
</item>
<item>
    <title>编写头文件的思路流程(value)</title>
    <link>https://example.com/c-%E7%BC%96%E5%86%99%E5%A4%B4%E6%96%87%E4%BB%B6%E7%9A%84%E6%80%9D%E8%B7%AF%E6%B5%81%E7%A8%8Bvalue/</link>
    <pubDate>Thu, 16 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/c-%E7%BC%96%E5%86%99%E5%A4%B4%E6%96%87%E4%BB%B6%E7%9A%84%E6%80%9D%E8%B7%AF%E6%B5%81%E7%A8%8Bvalue/</guid>
    <description><![CDATA[<h1 id="编写头文件的思路流程value">编写头文件的思路流程(value)</h1>
<h2 id="class内"><em><strong>class内</strong></em></h2>
<ol>
<li>
<p><em><strong>编写防卫式声明</strong></em></p>]]></description>
</item>
</channel>
</rss>
