<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Unreal - 标签 - Ame</title>
        <link>https://example.com/tags/unreal/</link>
        <description>Unreal - 标签 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 10 Jun 2025 21:34:00 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/unreal/" rel="self" type="application/rss+xml" /><item>
    <title>纹理</title>
    <link>https://example.com/direct3d-%E7%BA%B9%E7%90%86/</link>
    <pubDate>Tue, 10 Jun 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/direct3d-%E7%BA%B9%E7%90%86/</guid>
    <description><![CDATA[<h2 id="纹理简介"><em><strong>纹理简介</strong></em></h2>
<p><em>2D 纹理是一种由特定数据元素所构成的矩阵，它的用处之一即是存储 2D 图像数据，纹理中的每个元素都存储着对应像素的颜色。但是，这并不是它唯一的用途，比如说，在一种称为法线贴图的高级技术中，每个纹理元素都存储的是一个 3D 向量而非颜色数据。</em></p>]]></description>
</item>
<item>
    <title>Lyra-GAS</title>
    <link>https://example.com/lyra-gas/</link>
    <pubDate>Mon, 09 Jun 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-gas/</guid>
    <description><![CDATA[<h2 id="ulyrapawnextensioncomponent"><em><strong>ULyraPawnExtensionComponent</strong></em></h2>
<h3 id="作用"><em><strong>作用</strong></em></h3>
<ol>
<li><em><code>ULyraPawnExtensionComponent</code> 继承自 <code>UPawnComponent</code>（Pawn 的组件基类），并实现了<code>IGameFrameworkInitStateInterface</code>，说明它参与游戏框架的初始化状态管理流程。</em></li>
<li><em>它为 Pawn 提供统一的扩展支持，主要包含：</em>
<ul>
<li><em>Ability System Component (ASC) 的初始化与解绑</em></li>
<li><em>角色数据（PawnData）的管理与同步</em></li>
<li><em>输入绑定相关的辅助</em></li>
<li><em>监听并响应 Pawn 相关的状态变化（控制器变化、玩家状态同步等）</em></li>
</ul>
</li>
</ol>
<p><em>它是挂载在 Pawn（角色、载具等）上的一个扩展组件，负责协调角色的能力系统（GAS）及其他初始化状态的管理。整体职责是让所有 Pawn 类统一支持 Lyra 项目的功能扩展，尤其是与 <strong>Ability System Component (ASC)</strong> 相关的管理和初始化。</em></p>]]></description>
</item>
<item>
    <title>光照</title>
    <link>https://example.com/direct3d-%E5%85%89%E7%85%A7/</link>
    <pubDate>Wed, 14 May 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/direct3d-%E5%85%89%E7%85%A7/</guid>
    <description><![CDATA[<h2 id="光照与材质的交互"><em><strong>光照与材质的交互</strong></em></h2>
<p><em>在开启光照的同时，我们不再直接指出顶点的颜色，而是指定材质与光照，再运用光照方程（lighting equation）基于两者的交互来计算顶点颜色。这样做会使物体的颜色更趋于真实</em></p>]]></description>
</item>
<item>
    <title>绘制3D立方体(下)</title>
    <link>https://example.com/direct3d-%E7%BB%98%E5%88%B63d%E7%AB%8B%E6%96%B9%E4%BD%93%E4%B8%8B/</link>
    <pubDate>Wed, 23 Apr 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/direct3d-%E7%BB%98%E5%88%B63d%E7%AB%8B%E6%96%B9%E4%BD%93%E4%B8%8B/</guid>
    <description><![CDATA[<h2 id="帧资源"><em><strong>帧资源</strong></em></h2>
<p><em>在上篇，我们的演示程序在绘制每一帧时 都会将 CPU 和 GPU 进行一次同步，这样做的原因当然是确保数据安全。这种解决方案虽然奏效却效率低下</em></p>]]></description>
</item>
<item>
    <title>绘制3D立方体(上)</title>
    <link>https://example.com/direct3d-%E7%BB%98%E5%88%B63d%E7%AB%8B%E6%96%B9%E4%BD%93%E4%B8%8A/</link>
    <pubDate>Wed, 12 Feb 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/direct3d-%E7%BB%98%E5%88%B63d%E7%AB%8B%E6%96%B9%E4%BD%93%E4%B8%8A/</guid>
    <description><![CDATA[<h1 id="绘制3d立方体"><em><strong>绘制3D立方体</strong></em></h1>
<h2 id="顶点与输入布局"><em><strong>顶点与输入布局</strong></em></h2>
<p><em>除了空间位置，Direct3D 中的顶点还可以存储其他属性数据</em></p>]]></description>
</item>
<item>
    <title>渲染流水线</title>
    <link>https://example.com/direct3d-%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF/</link>
    <pubDate>Mon, 10 Feb 2025 22:44:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/direct3d-%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF/</guid>
    <description><![CDATA[<h1 id="渲染流水线"><em><strong>渲染流水线</strong></em></h1>
<h2 id="3d-视觉即错觉"><em><strong>3D 视觉即错觉？</strong></em></h2>
<p><em>我们都知道物体重叠（object overlap）的概念，即不透明物体能够遮挡住其后侧物体的局部（或整 体），如图 5.4 所示。这是一个重要的概念，它传达了不同物体在场景中的深度顺序关系。而我们在第 4 章 中也已经讨论过如何在 Direct3D 中借助深度缓冲区来确定那些应当受到遮蔽而不是绘制出来的像素。</em></p>]]></description>
</item>
<item>
    <title>DirectX3D的初始化</title>
    <link>https://example.com/directx3d-%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
    <pubDate>Mon, 10 Feb 2025 22:00:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/directx3d-%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
    <description><![CDATA[<h1 id="direct3d的初始化"><em><strong>Direct3D的初始化</strong></em></h1>
<h2 id="预备知识"><em><strong>预备知识</strong></em></h2>
<p><em>通过 Direct3D 这种底层图形应用程序编程接口（Application Programming Interface，API），即可在 在应用程序中对图形处理器（Graphics Processing Unit，GPU）进行控制和编程。我们能够借此以硬件加 速的方式渲染出虚拟的 3D 场景</em></p>]]></description>
</item>
<item>
    <title>变换矩阵</title>
    <link>https://example.com/3d%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5/</link>
    <pubDate>Thu, 06 Feb 2025 22:00:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/3d%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5/</guid>
    <description><![CDATA[<h1 id="变换"><em><strong>变换</strong></em></h1>
<h2 id="变换矩阵"><em><strong>变换矩阵</strong></em></h2>
<h3 id="定义"><em><strong>定义</strong></em></h3>
<p><em>先来研究一下数学函数 $ \tau(\vec{v}) = \tau(x, y, z) = (x&rsquo;, y&rsquo;, z&rsquo;) $。此函数的输入和输出都是 3D 向量。</em></p>]]></description>
</item>
<item>
    <title>向量</title>
    <link>https://example.com/3d%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%90%91%E9%87%8F/</link>
    <pubDate>Mon, 23 Dec 2024 22:00:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/3d%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%90%91%E9%87%8F/</guid>
    <description><![CDATA[<h1 id="向量"><em><strong>向量</strong></em></h1>
<h2 id="向量的定义"><em><strong>向量的定义</strong></em></h2>
<p><em>向量（vector）是一种兼具大小（也称为模，magnitude）和方向的量。具有这两种属性的量皆 称为向量值物理量（vector-valued quantity）</em></p>]]></description>
</item>
<item>
    <title>Unreal HLSL</title>
    <link>https://example.com/unreal-hlsl/</link>
    <pubDate>Sun, 22 Dec 2024 13:31:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/unreal-hlsl/</guid>
    <description><![CDATA[<h1 id="hlsl"><em><strong>HLSL</strong></em></h1>
<h2 id="数据类型"><em><strong>数据类型</strong></em></h2>
<p><em><strong>代码基于以下蓝图</strong></em></p>

<h3 id="bool"><em><strong>bool</strong></em></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hlsl" data-lang="hlsl"><span class="line"><span class="cl"><span class="kt">bool</span> <span class="n">b</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="int"><em><strong>int</strong></em></h3>
<p><em>数据范围为 &ldquo;-2147483648 ~ 2147483647&rdquo;</em></p>]]></description>
</item>
</channel>
</rss>
