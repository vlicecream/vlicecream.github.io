<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Unreal - 标签 - Ame</title>
        <link>https://example.com/tags/unreal/</link>
        <description>Unreal - 标签 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 15 Jul 2025 23:34:00 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/unreal/" rel="self" type="application/rss+xml" /><item>
    <title>Lyra 资源管理核心：自定义 AssetManager 实战</title>
    <link>https://example.com/lyra-dataassetmanager/</link>
    <pubDate>Tue, 15 Jul 2025 23:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-dataassetmanager/</guid>
    <description><![CDATA[<h2 id="作用"><em><strong>作用</strong></em></h2>
<p><em>在任何一个 Unreal Engine 项目中，资源（Assets）都是构成游戏世界的基础，包括模型、纹理、蓝图、数据资产等等。随着项目规模的扩大，如何高效、有序地加载和管理这些成千上万的资源，成了一个巨大的挑战。开发者常常会遇到这些问题：</em></p>]]></description>
</item>
<item>
    <title>Lyra架构：Game Feature 篇</title>
    <link>https://example.com/lyra-gamefeature/</link>
    <pubDate>Tue, 15 Jul 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-gamefeature/</guid>
    <description><![CDATA[<h2 id="作用"><em><strong>作用</strong></em></h2>
<p><em><strong>Game Feature</strong>（游戏特性）是虚幻引擎中一个强大的插件系统，旨在实现</em><em>高度模块化和可扩展的游戏开发</em>*。*</p>
<p><em>想象一下，你可以像搭乐高积木一样构建你的游戏：角色的能力、新的游戏模式、季节性活动，甚至UI界面，都可以作为一个独立的“特性”插件来开发。当需要时，只需<strong>动态地激活</strong>这个插件，所有相关的功能、内容和逻辑就会自动应用到游戏中；不需要时，则可以随时<strong>停用</strong>，干净利落地移除，而不会影响游戏的核心代码。</em></p>]]></description>
</item>
<item>
    <title>Lyra相机系统：数据驱动与责任分离的设计哲学</title>
    <link>https://example.com/lyra-camera/</link>
    <pubDate>Sun, 13 Jul 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-camera/</guid>
    <description><![CDATA[<h2 id="lyra的相机系统-简介"><em><strong>Lyra的相机系统 简介</strong></em></h2>
<p><em>Lyra其实没有用最基本的UCameraComponent，也没有用 USpringComponent</em></p>
<p><em>他是自己实现了继承于 UCameraComponent的类，他的功能为：</em></p>]]></description>
</item>
<item>
    <title>Rider &amp; Unreal 配置P4V</title>
    <link>https://example.com/p4-rider%E8%BF%9E%E6%8E%A5p4v/</link>
    <pubDate>Fri, 11 Jul 2025 22:00:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/p4-rider%E8%BF%9E%E6%8E%A5p4v/</guid>
    <description><![CDATA[<h2 id="rider"><em><strong>Rider</strong></em></h2>
<h3 id="配置p4v信息"><em><strong>配置P4V信息</strong></em></h3>
<ol>
<li><em>打开 Rider 设置: File -&gt; Settings (或者按 Ctrl+Alt+S)。</em></li>
<li><em>导航到 Version Control -&gt; Perforce。</em></li>
<li><em>配置连接参数:</em>
<ul>
<li><em><strong>Port</strong>: 输入你的服务器地址和端口，格式为 host:port (例如 p4.mycompany.com:1666)</em></li>
<li><em><strong>User</strong>: 输入你的 Perforce 用户名。</em></li>
<li><em><strong>Workspace</strong>: 输入你为这个项目创建的 <strong>工作区名称</strong>。这是 Rider 用来确定哪些文件在你的控制之下的关键。</em></li>
<li><em><strong>Path to P4 executable</strong>: 通常你可以留空，Rider 会自动从系统 PATH 中找到 p4.exe。如果找不到，你可以点击 &hellip; 按钮手动指定 p4.exe 文件的完整路径。</em></li>
<li><em><strong>Path to P4VC executable</strong>: 通常你可以留空，Rider 会自动从系统 PATH 中找到 p4v.exe。如果找不到，你可以点击 &hellip; 按钮手动指定 p4v.exe 文件的完整路径。</em></li>
</ul>
</li>
<li><em>测试连接:</em>
<ul>
<li><em>点击 Test Connection 按钮。</em></li>
<li><em>如果一切配置正确，你会看到一个 &ldquo;Connection successful&rdquo; 的提示。</em></li>
<li><em>如果提示需要输入密码，它会弹出一个对话框让你输入。输入后可以选择“记住密码”。</em></li>
<li><em>如果连接失败，请仔细检查你的服务器地址、用户名和工作区名称是否拼写正确。</em></li>
</ul>
</li>
</ol>
<h3 id="将项目与-perforce-关联"><em><strong>将项目与 Perforce 关联</strong></em></h3>
<p><em>即使配置好了连接，你还需要告诉 Rider 这个<strong>特定的项目</strong>要使用 Perforce 进行版本控制。</em></p>]]></description>
</item>
<item>
    <title>Lyra 架构解析：Experience DataAsset 的动态加载机制</title>
    <link>https://example.com/lyra-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C/</link>
    <pubDate>Thu, 10 Jul 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C/</guid>
    <description><![CDATA[<p><em><strong>举的例子为 大厅</strong></em></p>
<h2 id="什么是-experience-dataasset-的动态加载机制"><em><strong>什么是 Experience DataAsset 的动态加载机制</strong></em></h2>
<p><em>Lyra中是分很多游戏玩法的，他在进入一个新的玩法的时候，就会找到玩法对应的 ULyraExperienceDefinition 的数据，系统根据 ULyraExperienceDefinition 里的内容去激活<strong>Game Features</strong>、<strong>Abilities</strong> 和 <strong>UI</strong> 等。</em></p>]]></description>
</item>
<item>
    <title>解密Lyra初始化流程：IGameFrameworkInitStateInterface的核心回调</title>
    <link>https://example.com/lyra-igameframeworkinitstateinterface/</link>
    <pubDate>Thu, 10 Jul 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-igameframeworkinitstateinterface/</guid>
    <description><![CDATA[<h2 id="作用"><em><strong>作用</strong></em></h2>
<p><em>IGameFrameworkInitStateInterface 的作用，就是将一个组件原本<strong>混乱、单体</strong>的初始化过程（主要挤在BeginPlay里），拆分成一个<strong>清晰、有序、分阶段的“生命周期”</strong>。</em></p>]]></description>
</item>
<item>
    <title>p4v的下载和使用</title>
    <link>https://example.com/p4-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Mon, 07 Jul 2025 22:00:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/p4-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[<h2 id="下载p4v"><em><strong>下载P4V</strong></em></h2>
<p><em>URL: <a href="https://portal.perforce.com/s/downloads?product=Helix%20Visual%20Client%20%28P4V%29" target="_blank" rel="noopener noreffer ">https://portal.perforce.com/s/downloads?product=Helix%20Visual%20Client%20%28P4V%29</a></em></p>
<h2 id="安装后"><em><strong>安装后</strong></em></h2>
<p><em>打开P4V，输入服务器地址和用户名（这些信息在安装服务器或配置 P4 Cloud 时已创建）</em></p>]]></description>
</item>
<item>
    <title>Ubuntu搭建P4服务器</title>
    <link>https://example.com/p4-ubuntu%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
    <pubDate>Mon, 07 Jul 2025 22:00:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/p4-ubuntu%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
    <description><![CDATA[<h2 id="下载并安装-p4d"><em><strong>下载并安装 p4d</strong></em></h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> /tmp
</span></span><span class="line"><span class="cl">wget https://www.perforce.com/downloads/perforce/r24.1/bin.linux26x86_64/p4d
</span></span><span class="line"><span class="cl">chmod +x p4d
</span></span><span class="line"><span class="cl">sudo mv p4d /usr/local/bin/
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="创建服务用户和数据目录"><em><strong>创建服务用户和数据目录</strong></em></h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pr]]></description>
</item>
<item>
    <title>Lyra-Plugins</title>
    <link>https://example.com/lyra-plugins/</link>
    <pubDate>Mon, 16 Jun 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-plugins/</guid>
    <description><![CDATA[<h2 id="modulargameplayactors"><em><strong>ModularGameplayActors</strong></em></h2>
<h3 id="作用"><em><strong>作用</strong></em></h3>
<ul>
<li><em>Lyra 里的插件 <strong><code>ModularGameplayActors</code></strong> 是整个架构的一个核心部分，用来实现 <strong>角色、控制器、HUD 等 Gameplay 类的模块化（Modular）构建机制</strong>。它是 Lyra “模块化组件系统” 的基础，支持你以“插件化方式”给 Actor 添加功能，而不是通过硬继承和写死逻辑。</em></li>
</ul>
<h3 id="模块化系统的核心目标"><em><strong>模块化系统的核心目标</strong></em></h3>
<p><em>传统方式的问题：</em></p>]]></description>
</item>
<item>
    <title>纹理</title>
    <link>https://example.com/direct3d-%E7%BA%B9%E7%90%86/</link>
    <pubDate>Tue, 10 Jun 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/direct3d-%E7%BA%B9%E7%90%86/</guid>
    <description><![CDATA[<h2 id="纹理简介"><em><strong>纹理简介</strong></em></h2>
<p><em>2D 纹理是一种由特定数据元素所构成的矩阵，它的用处之一即是存储 2D 图像数据，纹理中的每个元素都存储着对应像素的颜色。但是，这并不是它唯一的用途，比如说，在一种称为法线贴图的高级技术中，每个纹理元素都存储的是一个 3D 向量而非颜色数据。</em></p>]]></description>
</item>
</channel>
</rss>
