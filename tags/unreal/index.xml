<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Unreal - 标签 - Ame</title>
        <link>https://example.com/tags/unreal/</link>
        <description>Unreal - 标签 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 16 Jun 2025 21:34:00 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/unreal/" rel="self" type="application/rss+xml" /><item>
    <title>Lyra-Plugins</title>
    <link>https://example.com/lyra-plugins/</link>
    <pubDate>Mon, 16 Jun 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-plugins/</guid>
    <description><![CDATA[<h2 id="modulargameplayactors"><em><strong>ModularGameplayActors</strong></em></h2>
<h3 id="作用"><em><strong>作用</strong></em></h3>
<ul>
<li><em>Lyra 里的插件 <strong><code>ModularGameplayActors</code></strong> 是整个架构的一个核心部分，用来实现 <strong>角色、控制器、HUD 等 Gameplay 类的模块化（Modular）构建机制</strong>。它是 Lyra “模块化组件系统” 的基础，支持你以“插件化方式”给 Actor 添加功能，而不是通过硬继承和写死逻辑。</em></li>
</ul>
<h3 id="模块化系统的核心目标"><em><strong>模块化系统的核心目标</strong></em></h3>
<p><em>传统方式的问题：</em></p>]]></description>
</item>
<item>
    <title>纹理</title>
    <link>https://example.com/direct3d-%E7%BA%B9%E7%90%86/</link>
    <pubDate>Tue, 10 Jun 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/direct3d-%E7%BA%B9%E7%90%86/</guid>
    <description><![CDATA[<h2 id="纹理简介"><em><strong>纹理简介</strong></em></h2>
<p><em>2D 纹理是一种由特定数据元素所构成的矩阵，它的用处之一即是存储 2D 图像数据，纹理中的每个元素都存储着对应像素的颜色。但是，这并不是它唯一的用途，比如说，在一种称为法线贴图的高级技术中，每个纹理元素都存储的是一个 3D 向量而非颜色数据。</em></p>]]></description>
</item>
<item>
    <title>Lyra-GAS</title>
    <link>https://example.com/lyra-gas/</link>
    <pubDate>Mon, 09 Jun 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-gas/</guid>
    <description><![CDATA[<h2 id="ulyraherocomponent"><em><strong>ULyraHeroComponent</strong></em></h2>
<h3 id="作用"><em><strong>作用</strong></em></h3>
<ol>
<li><em>让 Pawn 有能力接收输入、处理视角、连接 GAS 输入。</em></li>
<li><em>为玩家控制的 Pawn 提供输入初始化功能。</em></li>
<li><em>管理 camera mode（视角模式），支持 Gameplay Ability 控制相机。</em></li>
<li><em>与 GAS 输入系统结合，负责把输入（比如按下 Q）映射到能力（如施放火球）。</em></li>
<li><em>依赖 <code>ULyraPawnExtensionComponent</code> 的初始化状态。</em></li>
</ol>
<h3 id="接口与方法"><em><strong>接口与方法</strong></em></h3>
<h4 id="initializeplayerinputuinputcomponent-playerinputcomponent"><strong><em>InitializePlayerInput(UInputComponent</em> PlayerInputComponent)</strong>*</h4>
<ul>
<li><em>真正把 Enhanced Input 系统的按键绑定到函数或 GAS 的入口。</em></li>
</ul>
<h4 id="input_abilityinputtagpressedfgameplaytag-inputtag"><em><strong>Input_AbilityInputTagPressed(FGameplayTag InputTag)</strong></em></h4>
<ul>
<li><em>当玩家按下某个技能键（比如“技能1”）时被调用。</em></li>
<li><em>会调用 AbilitySystemComponent 的对应函数，比如：<code>AbilitySystem-&gt;AbilityLocalInputPressed(InputTag)</code>。实际作用是：激活绑定了该 InputTag 的 Ability。</em></li>
</ul>
<h4 id="addadditionalinputconfigremoveadditionalinputconfig"><em><strong>AddAdditionalInputConfig/RemoveAdditionalInputConfig</strong></em></h4>
<ul>
<li><em>允许动态添加/移除输入配置（如切换战斗/驾驶模式时加载不同操作逻辑）。</em></li>
</ul>
<h4 id="setabilitycameramode--clearabilitycameramode"><em><strong>SetAbilityCameraMode / ClearAbilityCameraMode</strong></em></h4>
<ul>
<li><em>GAS 中的 Ability 可以覆盖默认相机模式，比如瞄准模式/特殊视角。</em></li>
<li><em>设置 <code>AbilityCameraMode</code> 和记录触发这个模式的 <code>AbilitySpecHandle</code>。</em></li>
</ul>
<h4 id="isreadytobindinputs"><em><strong>IsReadyToBindInputs()</strong></em></h4>
<ul>
<li><em>检查当前 HeroComponent 是否已经准备好进行输入绑定（比如 PlayerController 已就绪）。</em></li>
<li><em><code>bReadyToBindInputs</code> 是这个状态的缓存。</em></li>
</ul>
<h4 id="初始化接口-igameframeworkinitstateinterface"><em><strong>初始化接口 <code>IGameFrameworkInitStateInterface</code></strong></em></h4>
<ul>
<li><em>Lyra 使用了一套通用初始化流程，组件通过实现这个接口来参与初始化状态机（如 Pawn 的各个初始化阶段）</em></li>
</ul>
<h3 id="成员变量说明"><em><strong>成员变量说明</strong></em></h3>
<ul>
<li><em>DefaultInputMappings：默认的输入映射表（使用 Enhanced Input）</em></li>
<li><em>AbilityCameraMode：当前由 Ability 设置的相机类</em></li>
<li><em>AbilityCameraModeOwningSpecHandle：设置相机的 Ability 的句柄</em></li>
<li><em>bReadyToBindInput：标记是否已完成输入绑定（通常在角色初始化完成后设为 true）</em></li>
</ul>
<h2 id="ulyrapawnextensioncomponent"><em><strong>ULyraPawnExtensionComponent</strong></em></h2>
<h3 id="作用-1"><em><strong>作用</strong></em></h3>
<ol>
<li><em><code>ULyraPawnExtensionComponent</code> 继承自 <code>UPawnComponent</code>（Pawn 的组件基类），并实现了<code>IGameFrameworkInitStateInterface</code>，说明它参与游戏框架的初始化状态管理流程。</em></li>
<li><em>它为 Pawn 提供统一的扩展支持，主要包含：</em>
<ul>
<li><em>Ability System Component (ASC) 的初始化与解绑</em></li>
<li><em>角色数据（PawnData）的管理与同步</em></li>
<li><em>输入绑定相关的辅助</em></li>
<li><em>监听并响应 Pawn 相关的状态变化（控制器变化、玩家状态同步等）</em></li>
</ul>
</li>
</ol>
<p><em>它是挂载在 Pawn（角色、载具等）上的一个扩展组件，负责协调角色的能力系统（GAS）及其他初始化状态的管理。整体职责是让所有 Pawn 类统一支持 Lyra 项目的功能扩展，尤其是与 <strong>Ability System Component (ASC)</strong> 相关的管理和初始化。</em></p>]]></description>
</item>
<item>
    <title>Lyra-Input</title>
    <link>https://example.com/lyra-input/</link>
    <pubDate>Mon, 09 Jun 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-input/</guid>
    <description><![CDATA[<h2 id="ulyrainputconfig"><em><strong>ULyraInputConfig</strong></em></h2>
<h3 id="作用"><em><strong>作用</strong></em></h3>
<ol>
<li><em>如何定义 <code>GameplayTag</code> 与 <code>InputAction</code> 的映射</em></li>
</ol>
<h3 id="接口与方法"><em><strong>接口与方法</strong></em></h3>
<h4 id="flyrainputaction"><em><strong>FLyraInputAction</strong></em></h4>
<ol>
<li><em>该结构体用于将输入操作映射到游戏玩法的输入标签上。</em></li>
</ol>
<h4 id="findnativeinputactionfortag"><em><strong>FindNativeInputActionForTag</strong></em></h4>
<ol>
<li><em>根据 GameplayTag来搜索 NativeInputAction</em></li>
</ol>
<p><em><strong>FindAbilityInputActionForTag</strong></em></p>]]></description>
</item>
<item>
    <title>光照</title>
    <link>https://example.com/direct3d-%E5%85%89%E7%85%A7/</link>
    <pubDate>Wed, 14 May 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/direct3d-%E5%85%89%E7%85%A7/</guid>
    <description><![CDATA[<h2 id="光照与材质的交互"><em><strong>光照与材质的交互</strong></em></h2>
<p><em>在开启光照的同时，我们不再直接指出顶点的颜色，而是指定材质与光照，再运用光照方程（lighting equation）基于两者的交互来计算顶点颜色。这样做会使物体的颜色更趋于真实</em></p>]]></description>
</item>
<item>
    <title>绘制3D立方体(下)</title>
    <link>https://example.com/direct3d-%E7%BB%98%E5%88%B63d%E7%AB%8B%E6%96%B9%E4%BD%93%E4%B8%8B/</link>
    <pubDate>Wed, 23 Apr 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/direct3d-%E7%BB%98%E5%88%B63d%E7%AB%8B%E6%96%B9%E4%BD%93%E4%B8%8B/</guid>
    <description><![CDATA[<h2 id="帧资源"><em><strong>帧资源</strong></em></h2>
<p><em>在上篇，我们的演示程序在绘制每一帧时 都会将 CPU 和 GPU 进行一次同步，这样做的原因当然是确保数据安全。这种解决方案虽然奏效却效率低下</em></p>]]></description>
</item>
<item>
    <title>绘制3D立方体(上)</title>
    <link>https://example.com/direct3d-%E7%BB%98%E5%88%B63d%E7%AB%8B%E6%96%B9%E4%BD%93%E4%B8%8A/</link>
    <pubDate>Wed, 12 Feb 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/direct3d-%E7%BB%98%E5%88%B63d%E7%AB%8B%E6%96%B9%E4%BD%93%E4%B8%8A/</guid>
    <description><![CDATA[<h1 id="绘制3d立方体"><em><strong>绘制3D立方体</strong></em></h1>
<h2 id="顶点与输入布局"><em><strong>顶点与输入布局</strong></em></h2>
<p><em>除了空间位置，Direct3D 中的顶点还可以存储其他属性数据</em></p>]]></description>
</item>
<item>
    <title>渲染流水线</title>
    <link>https://example.com/direct3d-%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF/</link>
    <pubDate>Mon, 10 Feb 2025 22:44:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/direct3d-%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF/</guid>
    <description><![CDATA[<h1 id="渲染流水线"><em><strong>渲染流水线</strong></em></h1>
<h2 id="3d-视觉即错觉"><em><strong>3D 视觉即错觉？</strong></em></h2>
<p><em>我们都知道物体重叠（object overlap）的概念，即不透明物体能够遮挡住其后侧物体的局部（或整 体），如图 5.4 所示。这是一个重要的概念，它传达了不同物体在场景中的深度顺序关系。而我们在第 4 章 中也已经讨论过如何在 Direct3D 中借助深度缓冲区来确定那些应当受到遮蔽而不是绘制出来的像素。</em></p>]]></description>
</item>
<item>
    <title>DirectX3D的初始化</title>
    <link>https://example.com/directx3d-%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
    <pubDate>Mon, 10 Feb 2025 22:00:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/directx3d-%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
    <description><![CDATA[<h1 id="direct3d的初始化"><em><strong>Direct3D的初始化</strong></em></h1>
<h2 id="预备知识"><em><strong>预备知识</strong></em></h2>
<p><em>通过 Direct3D 这种底层图形应用程序编程接口（Application Programming Interface，API），即可在 在应用程序中对图形处理器（Graphics Processing Unit，GPU）进行控制和编程。我们能够借此以硬件加 速的方式渲染出虚拟的 3D 场景</em></p>]]></description>
</item>
<item>
    <title>变换矩阵</title>
    <link>https://example.com/3d%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5/</link>
    <pubDate>Thu, 06 Feb 2025 22:00:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/3d%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5/</guid>
    <description><![CDATA[<h1 id="变换"><em><strong>变换</strong></em></h1>
<h2 id="变换矩阵"><em><strong>变换矩阵</strong></em></h2>
<h3 id="定义"><em><strong>定义</strong></em></h3>
<p><em>先来研究一下数学函数 $ \tau(\vec{v}) = \tau(x, y, z) = (x&rsquo;, y&rsquo;, z&rsquo;) $。此函数的输入和输出都是 3D 向量。</em></p>]]></description>
</item>
</channel>
</rss>
