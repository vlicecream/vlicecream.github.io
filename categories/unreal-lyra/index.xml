<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Unreal-Lyra - 分类 - Ame</title>
        <link>https://example.com/categories/unreal-lyra/</link>
        <description>Unreal-Lyra - 分类 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 10 Jul 2025 21:34:00 &#43;0800</lastBuildDate><atom:link href="https://example.com/categories/unreal-lyra/" rel="self" type="application/rss+xml" /><item>
    <title>Lyra 架构解析：Experience DataAsset 的动态加载机制</title>
    <link>https://example.com/lyra-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C/</link>
    <pubDate>Thu, 10 Jul 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C/</guid>
    <description><![CDATA[<p><em><strong>举的例子为 大厅</strong></em></p>
<h2 id="什么是-experience-dataasset-的动态加载机制"><em><strong>什么是 Experience DataAsset 的动态加载机制</strong></em></h2>
<p><em>Lyra中是分很多游戏玩法的，他在进入一个新的玩法的时候，就会找到玩法对应的 ULyraExperienceDefinition 的数据，系统根据 ULyraExperienceDefinition 里的内容去激活<strong>Game Features</strong>、<strong>Abilities</strong> 和 <strong>UI</strong> 等。</em></p>]]></description>
</item>
<item>
    <title>解密Lyra初始化流程：IGameFrameworkInitStateInterface的核心回调</title>
    <link>https://example.com/lyra-igameframeworkinitstateinterface/</link>
    <pubDate>Thu, 10 Jul 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-igameframeworkinitstateinterface/</guid>
    <description><![CDATA[<h2 id="作用"><em><strong>作用</strong></em></h2>
<p><em>IGameFrameworkInitStateInterface 的作用，就是将一个组件原本<strong>混乱、单体</strong>的初始化过程（主要挤在BeginPlay里），拆分成一个<strong>清晰、有序、分阶段的“生命周期”</strong>。</em></p>]]></description>
</item>
<item>
    <title>Lyra-Plugins</title>
    <link>https://example.com/lyra-plugins/</link>
    <pubDate>Mon, 16 Jun 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-plugins/</guid>
    <description><![CDATA[<h2 id="modulargameplayactors"><em><strong>ModularGameplayActors</strong></em></h2>
<h3 id="作用"><em><strong>作用</strong></em></h3>
<ul>
<li><em>Lyra 里的插件 <strong><code>ModularGameplayActors</code></strong> 是整个架构的一个核心部分，用来实现 <strong>角色、控制器、HUD 等 Gameplay 类的模块化（Modular）构建机制</strong>。它是 Lyra “模块化组件系统” 的基础，支持你以“插件化方式”给 Actor 添加功能，而不是通过硬继承和写死逻辑。</em></li>
</ul>
<h3 id="模块化系统的核心目标"><em><strong>模块化系统的核心目标</strong></em></h3>
<p><em>传统方式的问题：</em></p>]]></description>
</item>
<item>
    <title>Lyra-GAS</title>
    <link>https://example.com/lyra-gas/</link>
    <pubDate>Mon, 09 Jun 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-gas/</guid>
    <description><![CDATA[<h2 id="ulyraherocomponent"><em><strong>ULyraHeroComponent</strong></em></h2>
<h3 id="作用"><em><strong>作用</strong></em></h3>
<ol>
<li><em>让 Pawn 有能力接收输入、处理视角、连接 GAS 输入。</em></li>
<li><em>为玩家控制的 Pawn 提供输入初始化功能。</em></li>
<li><em>管理 camera mode（视角模式），支持 Gameplay Ability 控制相机。</em></li>
<li><em>与 GAS 输入系统结合，负责把输入（比如按下 Q）映射到能力（如施放火球）。</em></li>
<li><em>依赖 <code>ULyraPawnExtensionComponent</code> 的初始化状态。</em></li>
</ol>
<h3 id="接口与方法"><em><strong>接口与方法</strong></em></h3>
<h4 id="initializeplayerinputuinputcomponent-playerinputcomponent"><strong><em>InitializePlayerInput(UInputComponent</em> PlayerInputComponent)</strong>*</h4>
<ul>
<li><em>真正把 Enhanced Input 系统的按键绑定到函数或 GAS 的入口。</em></li>
</ul>
<h4 id="input_abilityinputtagpressedfgameplaytag-inputtag"><em><strong>Input_AbilityInputTagPressed(FGameplayTag InputTag)</strong></em></h4>
<ul>
<li><em>当玩家按下某个技能键（比如“技能1”）时被调用。</em></li>
<li><em>会调用 AbilitySystemComponent 的对应函数，比如：<code>AbilitySystem-&gt;AbilityLocalInputPressed(InputTag)</code>。实际作用是：激活绑定了该 InputTag 的 Ability。</em></li>
</ul>
<h4 id="addadditionalinputconfigremoveadditionalinputconfig"><em><strong>AddAdditionalInputConfig/RemoveAdditionalInputConfig</strong></em></h4>
<ul>
<li><em>允许动态添加/移除输入配置（如切换战斗/驾驶模式时加载不同操作逻辑）。</em></li>
</ul>
<h4 id="setabilitycameramode--clearabilitycameramode"><em><strong>SetAbilityCameraMode / ClearAbilityCameraMode</strong></em></h4>
<ul>
<li><em>GAS 中的 Ability 可以覆盖默认相机模式，比如瞄准模式/特殊视角。</em></li>
<li><em>设置 <code>AbilityCameraMode</code> 和记录触发这个模式的 <code>AbilitySpecHandle</code>。</em></li>
</ul>
<h4 id="isreadytobindinputs"><em><strong>IsReadyToBindInputs()</strong></em></h4>
<ul>
<li><em>检查当前 HeroComponent 是否已经准备好进行输入绑定（比如 PlayerController 已就绪）。</em></li>
<li><em><code>bReadyToBindInputs</code> 是这个状态的缓存。</em></li>
</ul>
<h4 id="初始化接口-igameframeworkinitstateinterface"><em><strong>初始化接口 <code>IGameFrameworkInitStateInterface</code></strong></em></h4>
<ul>
<li><em>Lyra 使用了一套通用初始化流程，组件通过实现这个接口来参与初始化状态机（如 Pawn 的各个初始化阶段）</em></li>
</ul>
<h3 id="成员变量说明"><em><strong>成员变量说明</strong></em></h3>
<ul>
<li><em>DefaultInputMappings：默认的输入映射表（使用 Enhanced Input）</em></li>
<li><em>AbilityCameraMode：当前由 Ability 设置的相机类</em></li>
<li><em>AbilityCameraModeOwningSpecHandle：设置相机的 Ability 的句柄</em></li>
<li><em>bReadyToBindInput：标记是否已完成输入绑定（通常在角色初始化完成后设为 true）</em></li>
</ul>
<h2 id="ulyrapawnextensioncomponent"><em><strong>ULyraPawnExtensionComponent</strong></em></h2>
<h3 id="作用-1"><em><strong>作用</strong></em></h3>
<ol>
<li><em><code>ULyraPawnExtensionComponent</code> 继承自 <code>UPawnComponent</code>（Pawn 的组件基类），并实现了<code>IGameFrameworkInitStateInterface</code>，说明它参与游戏框架的初始化状态管理流程。</em></li>
<li><em>它为 Pawn 提供统一的扩展支持，主要包含：</em>
<ul>
<li><em>Ability System Component (ASC) 的初始化与解绑</em></li>
<li><em>角色数据（PawnData）的管理与同步</em></li>
<li><em>输入绑定相关的辅助</em></li>
<li><em>监听并响应 Pawn 相关的状态变化（控制器变化、玩家状态同步等）</em></li>
</ul>
</li>
</ol>
<p><em>它是挂载在 Pawn（角色、载具等）上的一个扩展组件，负责协调角色的能力系统（GAS）及其他初始化状态的管理。整体职责是让所有 Pawn 类统一支持 Lyra 项目的功能扩展，尤其是与 <strong>Ability System Component (ASC)</strong> 相关的管理和初始化。</em></p>]]></description>
</item>
<item>
    <title>深入Lyra输入系统：从按键到能力的完整旅程</title>
    <link>https://example.com/lyra-input/</link>
    <pubDate>Mon, 09 Jun 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-input/</guid>
    <description><![CDATA[<h2 id="前言"><em><strong>前言</strong></em></h2>
<p><em>需要你先了解：</em></p>
<ol>
<li><em>Lyra 架构解析：Experience DataAsset 的动态加载机制</em></li>
</ol>
<h2 id="角色的基础输入流程"><em><strong>角色的基础输入流程</strong></em></h2>
<ol>
<li>
<p><em>经历过 Experience DataAsset 的动态加载成功，收到信号</em></p>]]></description>
</item>
</channel>
</rss>
