<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Effective C&#43;&#43; - 分类 - Ame</title>
        <link>https://example.com/categories/effective-c&#43;&#43;/</link>
        <description>Effective C&#43;&#43; - 分类 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 09 Mar 2023 16:29:59 &#43;0800</lastBuildDate><atom:link href="https://example.com/categories/effective-c&#43;&#43;/" rel="self" type="application/rss+xml" /><item>
    <title>条款41~48 模板与泛型编程</title>
    <link>https://example.com/effective-c-%E6%9D%A1%E6%AC%BE41-48/</link>
    <pubDate>Thu, 09 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/effective-c-%E6%9D%A1%E6%AC%BE41-48/</guid>
    <description><![CDATA[<h1 id="条款4148-模板与泛型编程">条款41~48 模板与泛型编程</h1>
<h2 id="条款41-隐式接口和编译器多态"><em><strong>条款41 隐式接口和编译器多态</strong></em></h2>
<ol>
<li>
<p><em>什么是显式接口和运行期多态</em></p>]]></description>
</item>
<item>
    <title>条款32~40 继承与面向对象设计</title>
    <link>https://example.com/effective-c-%E6%9D%A1%E6%AC%BE32-40/</link>
    <pubDate>Wed, 08 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/effective-c-%E6%9D%A1%E6%AC%BE32-40/</guid>
    <description><![CDATA[<h1 id="条款3240-继承与面向对象设计">条款32~40 继承与面向对象设计</h1>
<h2 id="前言"><em><strong>前言</strong></em></h2>
<ol>
<li><em>这一大章条款 主要是说的继承与面向对象设计，说实话我觉得没有看这一大章的必要，去看本博客的《<a href="https://vlicecream.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener noreffer ">设计模式</a>》章节</em></li>
<li><em>设计模式这个名字太高大上，其实他就是可复用的面向对象设计，没错，你在学设计模式其实就是相当于学面向对象</em></li>
<li><em>设计模式也是基于面向对象设计原则的，所以你不懂设计模式，不懂面向对象设计原则，我觉得你看完这一章作用也不大</em></li>
<li><em>懂设计模式的希望你看本章节会有一些新的体会，其实每个条款都是对应着面向对象设计原则，同时也有很多设计模式可以解决这些条款的问题</em></li>
<li><em>没有错，在本大章节，我就是设计模式吹!!!</em></li>
</ol>
<h2 id="条款32-确保public继承是is-a关系"><em><strong>条款32 确保public继承是is-a关系</strong></em></h2>
<ol>
<li>
<p><em>&ldquo;is-a&quot;的概念</em></p>]]></description>
</item>
<item>
    <title>条款26～31 实现</title>
    <link>https://example.com/effective-c-%E6%9D%A1%E6%AC%BE26-31/</link>
    <pubDate>Tue, 07 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/effective-c-%E6%9D%A1%E6%AC%BE26-31/</guid>
    <description><![CDATA[<h1 id="条款2631-实现">条款26～31 实现</h1>
<h2 id="条款26-尽可能延后变量定义得时间"><em><strong>条款26 尽可能延后变量定义得时间</strong></em></h2>
<ol>
<li>
<p><em>因为变量（对类而言）的定义，需要承担一次构造函数的时间，在函数结束后还可能承担一次析构函数的时间，假如该变量未被使用，那么构造函数和析构函数的时间就白白浪费了，尤其是在可能发生异常的函数中，假如你过早的定义变量，然后在你使用这个变量之前抛出了异常，那么这个变量的构造函数就没有意义而且降低效率。所以应该尽可能延后变量定义得时间，只有真正使用这个变量的时候才定义它</em></p>]]></description>
</item>
<item>
    <title>条款18～25 设计与生命</title>
    <link>https://example.com/effective-c-%E6%9D%A1%E6%AC%BE18-25/</link>
    <pubDate>Mon, 06 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/effective-c-%E6%9D%A1%E6%AC%BE18-25/</guid>
    <description><![CDATA[<h1 id="条款1825-设计与生命">条款18～25 设计与生命</h1>
<h2 id="条款18-让接口容易被正确使用不易被误用"><em><strong>条款18 让接口容易被正确使用，不易被误用</strong></em></h2>
<ol>
<li>
<p><em>对class的参数类型进行抽象</em></p>]]></description>
</item>
<item>
    <title>条款13～17 资源管理</title>
    <link>https://example.com/effective-c-%E6%9D%A1%E6%AC%BE13-17/</link>
    <pubDate>Sun, 05 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/effective-c-%E6%9D%A1%E6%AC%BE13-17/</guid>
    <description><![CDATA[<h1 id="条款1317-资源管理">条款13～17 资源管理</h1>
<h2 id="知识点-raii对象"><em><strong>知识点 RAII对象</strong></em></h2>
<ol>
<li><em>本大章节-资源管理，需要弄懂什么是RAII，在本博客《<a href="https://vlicecream.github.io/%E7%BC%98%E8%B5%B7-raii%E6%98%AF%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener noreffer ">什么是RAII</a>》中有详解</em></li>
</ol>
<h2 id="条款13-以对象管理资源"><em><strong>条款13 以对象管理资源</strong></em></h2>
<ol>
<li>
<p><em>前言</em></p>]]></description>
</item>
<item>
    <title>条款5～12 构造/析构/赋值运算</title>
    <link>https://example.com/effective-c-%E6%9D%A1%E6%AC%BE5-12/</link>
    <pubDate>Sat, 04 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/effective-c-%E6%9D%A1%E6%AC%BE5-12/</guid>
    <description><![CDATA[<h1 id="条款512-构造析构赋值运算">条款5～12 构造/析构/赋值运算</h1>
<h2 id="条款5-了解c默认生成的函数"><em><strong>条款5-了解c++默认生成的函数</strong></em></h2>
<ol>
<li>
<p><em><strong>前言</strong></em></p>]]></description>
</item>
<item>
    <title>条款1～4 让自己习惯c&#43;&#43;</title>
    <link>https://example.com/effective-c-%E6%9D%A1%E6%AC%BE1-4/</link>
    <pubDate>Fri, 03 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/effective-c-%E6%9D%A1%E6%AC%BE1-4/</guid>
    <description><![CDATA[<h1 id="条款14-让自己习惯c">条款1～4 让自己习惯c++</h1>
<h2 id="条款1-视c为一个语言联邦"><em><strong>条款1-视c++为一个语言联邦</strong></em></h2>
<ol>
<li>
<p><em>视c++为一个语言联邦</em></p>]]></description>
</item>
</channel>
</rss>
