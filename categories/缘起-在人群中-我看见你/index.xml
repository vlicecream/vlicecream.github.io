<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>缘起 在人群中 我看见你 - 分类 - Ame</title>
        <link>https://example.com/categories/%E7%BC%98%E8%B5%B7-%E5%9C%A8%E4%BA%BA%E7%BE%A4%E4%B8%AD-%E6%88%91%E7%9C%8B%E8%A7%81%E4%BD%A0/</link>
        <description>缘起 在人群中 我看见你 - 分类 - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 18 Mar 2023 16:29:59 &#43;0800</lastBuildDate><atom:link href="https://example.com/categories/%E7%BC%98%E8%B5%B7-%E5%9C%A8%E4%BA%BA%E7%BE%A4%E4%B8%AD-%E6%88%91%E7%9C%8B%E8%A7%81%E4%BD%A0/" rel="self" type="application/rss+xml" /><item>
    <title>PImpl</title>
    <link>https://example.com/%E7%BC%98%E8%B5%B7-pimpl/</link>
    <pubDate>Sat, 18 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E7%BC%98%E8%B5%B7-pimpl/</guid>
    <description><![CDATA[<h1 id="c-pimpl">C++ PImpl</h1>
<h2 id="pimpl惯用法"><em><strong>PImpl惯用法</strong></em></h2>
<p><em>PImpl术语，即&quot;pointer to implementation&quot; （指向实现的指针），由Jeff Summer最先引入。</em></p>]]></description>
</item>
<item>
    <title>RTTI</title>
    <link>https://example.com/%E7%BC%98%E8%B5%B7-rtti/</link>
    <pubDate>Sat, 11 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E7%BC%98%E8%B5%B7-rtti/</guid>
    <description><![CDATA[<h1 id="c-rtti">c++ RTTI</h1>
<h2 id="什么是rtti"><em><strong>什么是RTTI</strong></em></h2>
<ol>
<li><em>RTTI是”Runtime Type Information”的缩写，意思是运行时类型信息，它提供了运行时确定对象类型的方法</em></li>
</ol>
<h2 id="typeid"><em><strong>typeid</strong></em></h2>
<ol>
<li>
<p><em>对于c++的内置数据类型以及自己创建的类对象，typeid可以方便的输出他们的数据类型</em></p>]]></description>
</item>
<item>
    <title>啥是RAII?</title>
    <link>https://example.com/%E7%BC%98%E8%B5%B7-raii/</link>
    <pubDate>Mon, 06 Mar 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E7%BC%98%E8%B5%B7-raii/</guid>
    <description><![CDATA[<h1 id="啥是raii">啥是RAII?</h1>
<h2 id="什么是raii"><em><strong>什么是RAII</strong></em></h2>
<ol>
<li><em>RAII是指C++语言中的一个惯用法（idiom），它是“Resource Acquisition Is Initialization”的首字母缩写。中文可将其翻译为“资源获取就是初始化”</em></li>
<li><em>虽然从某种程度上说这个名称并没有体现出该惯性法的本质精神，但是作为标准C++资源管理的关键技术，RAII早已在C++社群中深入人心</em></li>
</ol>
<h2 id="思路推导"><em><strong>思路推导</strong></em></h2>
<p><em>如果你有写过C++或者RUST，你也许听过Resource Acquisition Is Initialisation (RAII), 但是并不了解这名字的含义是什么，或者不知道这个机制有什么用处。在这篇文章中，笔者将详细阐述RAII的原理以及它在资源管理方面巨大的威力</em></p>]]></description>
</item>
<item>
    <title>如何理解协程</title>
    <link>https://example.com/%E7%BC%98%E8%B5%B7-%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%8D%8F%E7%A8%8B/</link>
    <pubDate>Fri, 17 Feb 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E7%BC%98%E8%B5%B7-%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%8D%8F%E7%A8%8B/</guid>
    <description><![CDATA[<h1 id="如何理解协程">如何理解协程?</h1>
<h2 id="普通的函数"><em><strong>普通的函数</strong></em></h2>
<p><em>我们先来看看普通的函数，从简到繁嘛</em></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pr]]></description>
</item>
<item>
    <title>函数运行时在内存中是什么样子</title>
    <link>https://example.com/%E7%BC%98%E8%B5%B7-%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90/</link>
    <pubDate>Thu, 16 Feb 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E7%BC%98%E8%B5%B7-%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90/</guid>
    <description><![CDATA[<h1 id="函数运行时在内存中是什么样子">函数运行时在内存中是什么样子?</h1>
<h2 id="引言"><em><strong>引言</strong></em></h2>
<p><em>在进入到本章的内容前，我们来思考思考几个问题</em></p>]]></description>
</item>
<item>
    <title>线程共享了哪些进程资源</title>
    <link>https://example.com/%E7%BC%98%E8%B5%B7-%E7%BA%BF%E7%A8%8B%E5%88%B0%E5%BA%95%E5%85%B1%E4%BA%AB%E4%BA%86%E9%82%A3%E4%BA%9B%E8%BF%9B%E7%A8%8B%E8%B5%84%E6%BA%90/</link>
    <pubDate>Fri, 10 Feb 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E7%BC%98%E8%B5%B7-%E7%BA%BF%E7%A8%8B%E5%88%B0%E5%BA%95%E5%85%B1%E4%BA%AB%E4%BA%86%E9%82%A3%E4%BA%9B%E8%BF%9B%E7%A8%8B%E8%B5%84%E6%BA%90/</guid>
    <description><![CDATA[<h1 id="线程到底共享了哪些进程资源">线程到底共享了哪些进程资源?</h1>
<h2 id="引言"><em><strong>引言</strong></em></h2>
<ol>
<li>
<p><em>鲁迅经常说这样一句话：“反过来想，总是反过来想”，如果你对线程之间共享了哪些进程资源这个问题想不清楚的话那么也可以反过来思考，那就是<strong>有哪些资源是线程私有的</strong></em></p>]]></description>
</item>
</channel>
</rss>
