<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Ame</title>
        <link>https://example.com/posts/</link>
        <description>所有文章 | Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 08 Aug 2025 07:50:00 &#43;0800</lastBuildDate><atom:link href="https://example.com/posts/" rel="self" type="application/rss+xml" /><item>
    <title>微积分 - 预备知识</title>
    <link>https://example.com/%E5%BE%AE%E7%A7%AF%E5%88%86-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</link>
    <pubDate>Fri, 08 Aug 2025 07:50:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E5%BE%AE%E7%A7%AF%E5%88%86-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</guid>
    <description><![CDATA[<h2 id="直线"><em><strong>直线</strong></em></h2>
<h3 id="增量"><em><strong>增量</strong></em></h3>
<p>$$
如果一个质点从 (x_1, y_1) 移动到 (x_2, y_2)，则其坐标的增量为：
\\ \\
\Delta{x} = x_2 - x_1 ~~~~~~~~~~~~~~~ \Delta{y} = y_2 - y_1
$$</p>
<p><em>质点就是物理学一个有质量但没有体积和形状的理想化模型</em></p>]]></description>
</item>
<item>
    <title>Lyra - 行为树</title>
    <link>https://example.com/lyra-%E8%A1%8C%E4%B8%BA%E6%A0%91/</link>
    <pubDate>Tue, 05 Aug 2025 22:15:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-%E8%A1%8C%E4%B8%BA%E6%A0%91/</guid>
    <description><![CDATA[<h2 id="lyra行为树"><em><strong>Lyra行为树</strong></em></h2>
<p><em>Lyra是在生成Bot的时候会传入数据 生成AIController，随后在AIController里面绑定行为树</em></p>]]></description>
</item>
<item>
    <title>Lyra 库存与装备系统</title>
    <link>https://example.com/lyra-%E5%BA%93%E5%AD%98%E4%B8%8E%E8%A3%85%E5%A4%87%E7%B3%BB%E7%BB%9F/</link>
    <pubDate>Wed, 23 Jul 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-%E5%BA%93%E5%AD%98%E4%B8%8E%E8%A3%85%E5%A4%87%E7%B3%BB%E7%BB%9F/</guid>
    <description><![CDATA[<h2 id="equipment"><em><strong>Equipment</strong></em></h2>
<p><em>Equipment 是 Lyra 的装备系统，也就是执行装备这个过程逻辑的一个系统</em></p>
<p><em>它通过 <code>ULyraEquipmentDefinition</code> 这个类，来获得装备的Actor真正的实例，以及装备上会获得什么技能，还有装备到哪里，比如枪装备到人的一个左手骨骼点上</em></p>]]></description>
</item>
<item>
    <title>Lyra-HealthComponent</title>
    <link>https://example.com/lyra-healthcomponent/</link>
    <pubDate>Wed, 23 Jul 2025 20:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-healthcomponent/</guid>
    <description><![CDATA[Lyra 里的 HealthComponent]]></description>
</item>
<item>
    <title>Lyra动画层（Anim Layers）与重写机制全解析</title>
    <link>https://example.com/lyra-animation/</link>
    <pubDate>Wed, 23 Jul 2025 20:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-animation/</guid>
    <description><![CDATA[<h2 id="参考资料"><em><strong>参考资料</strong></em></h2>
<p><em><a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/animation-in-lyra-sample-game-in-unreal-engine?application_version=5.3" target="_blank" rel="noopener noreffer ">https://dev.epicgames.com/documentation/zh-cn/unreal-engine/animation-in-lyra-sample-game-in-unreal-engine?application_version=5.3</a></em></p>
<p><em><a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/using-animation-blueprint-linking-in-unreal-engine?application_version=5.3" target="_blank" rel="noopener noreffer ">https://dev.epicgames.com/documentation/zh-cn/unreal-engine/using-animation-blueprint-linking-in-unreal-engine?application_version=5.3</a></em></p>
<h2 id="简介"><em><strong>简介</strong></em></h2>
<p><em>Lyra 的 动画蓝图，首先是采用 蓝图线程安全更新动画，此开启方法在文档中就写了。再次提一句，这实现了使用属性访问（Property Access）来访问其所有数据，并避免了重新计算链接的图层可能使用的值，如 <strong>加速度（Acceleration）</strong> 或 <strong>速度（Velocity）</strong> 。</em></p>]]></description>
</item>
<item>
    <title>UE开发使用Rider时缓存干爆C盘的解决方案</title>
    <link>https://example.com/ue%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8rider%E6%97%B6%E7%BC%93%E5%AD%98c%E7%9B%98/</link>
    <pubDate>Fri, 18 Jul 2025 13:31:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/ue%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8rider%E6%97%B6%E7%BC%93%E5%AD%98c%E7%9B%98/</guid>
    <description><![CDATA[<p><em>我们在使用Rider开发UE时，Ride会为每一个项目创建一个解决方案缓存，如果开几个新项目写测试demo，我们的C盘会逐渐捉急</em></p>
<p><em>不知道官方怎么想的，默认在C盘就算了，还没法改</em></p>]]></description>
</item>
<item>
    <title>Lyra 资源管理核心：自定义 AssetManager 实战</title>
    <link>https://example.com/lyra-dataassetmanager/</link>
    <pubDate>Tue, 15 Jul 2025 23:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-dataassetmanager/</guid>
    <description><![CDATA[<h2 id="作用"><em><strong>作用</strong></em></h2>
<p><em>在任何一个 Unreal Engine 项目中，资源（Assets）都是构成游戏世界的基础，包括模型、纹理、蓝图、数据资产等等。随着项目规模的扩大，如何高效、有序地加载和管理这些成千上万的资源，成了一个巨大的挑战。开发者常常会遇到这些问题：</em></p>]]></description>
</item>
<item>
    <title>Lyra架构：Game Feature 篇</title>
    <link>https://example.com/lyra-gamefeature/</link>
    <pubDate>Tue, 15 Jul 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-gamefeature/</guid>
    <description><![CDATA[<h2 id="作用"><em><strong>作用</strong></em></h2>
<p><em><strong>Game Feature</strong>（游戏特性）是虚幻引擎中一个强大的插件系统，旨在实现</em><em>高度模块化和可扩展的游戏开发</em>*。*</p>
<p><em>想象一下，你可以像搭乐高积木一样构建你的游戏：角色的能力、新的游戏模式、季节性活动，甚至UI界面，都可以作为一个独立的“特性”插件来开发。当需要时，只需<strong>动态地激活</strong>这个插件，所有相关的功能、内容和逻辑就会自动应用到游戏中；不需要时，则可以随时<strong>停用</strong>，干净利落地移除，而不会影响游戏的核心代码。</em></p>]]></description>
</item>
<item>
    <title>Lyra相机系统：数据驱动与责任分离的设计哲学</title>
    <link>https://example.com/lyra-camera/</link>
    <pubDate>Sun, 13 Jul 2025 21:34:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/lyra-camera/</guid>
    <description><![CDATA[<h2 id="lyra的相机系统-简介"><em><strong>Lyra的相机系统 简介</strong></em></h2>
<p><em>Lyra其实没有用最基本的UCameraComponent，也没有用 USpringComponent</em></p>
<p><em>他是自己实现了继承于 UCameraComponent的类，他的功能为：</em></p>]]></description>
</item>
<item>
    <title>Rider &amp; Unreal 配置P4V</title>
    <link>https://example.com/p4-rider%E8%BF%9E%E6%8E%A5p4v/</link>
    <pubDate>Fri, 11 Jul 2025 22:00:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/p4-rider%E8%BF%9E%E6%8E%A5p4v/</guid>
    <description><![CDATA[<h2 id="rider"><em><strong>Rider</strong></em></h2>
<h3 id="配置p4v信息"><em><strong>配置P4V信息</strong></em></h3>
<ol>
<li><em>打开 Rider 设置: File -&gt; Settings (或者按 Ctrl+Alt+S)。</em></li>
<li><em>导航到 Version Control -&gt; Perforce。</em></li>
<li><em>配置连接参数:</em>
<ul>
<li><em><strong>Port</strong>: 输入你的服务器地址和端口，格式为 host:port (例如 p4.mycompany.com:1666)</em></li>
<li><em><strong>User</strong>: 输入你的 Perforce 用户名。</em></li>
<li><em><strong>Workspace</strong>: 输入你为这个项目创建的 <strong>工作区名称</strong>。这是 Rider 用来确定哪些文件在你的控制之下的关键。</em></li>
<li><em><strong>Path to P4 executable</strong>: 通常你可以留空，Rider 会自动从系统 PATH 中找到 p4.exe。如果找不到，你可以点击 &hellip; 按钮手动指定 p4.exe 文件的完整路径。</em></li>
<li><em><strong>Path to P4VC executable</strong>: 通常你可以留空，Rider 会自动从系统 PATH 中找到 p4v.exe。如果找不到，你可以点击 &hellip; 按钮手动指定 p4v.exe 文件的完整路径。</em></li>
</ul>
</li>
<li><em>测试连接:</em>
<ul>
<li><em>点击 Test Connection 按钮。</em></li>
<li><em>如果一切配置正确，你会看到一个 &ldquo;Connection successful&rdquo; 的提示。</em></li>
<li><em>如果提示需要输入密码，它会弹出一个对话框让你输入。输入后可以选择“记住密码”。</em></li>
<li><em>如果连接失败，请仔细检查你的服务器地址、用户名和工作区名称是否拼写正确。</em></li>
</ul>
</li>
</ol>
<h3 id="将项目与-perforce-关联"><em><strong>将项目与 Perforce 关联</strong></em></h3>
<p><em>即使配置好了连接，你还需要告诉 Rider 这个<strong>特定的项目</strong>要使用 Perforce 进行版本控制。</em></p>]]></description>
</item>
</channel>
</rss>
